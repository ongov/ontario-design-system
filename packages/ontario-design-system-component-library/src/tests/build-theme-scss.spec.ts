import * as fs from 'fs';

import {
	checkOutputFolderExists,
	getSlottedStyleFiles,
	generateThemeSCSSContent,
	writeGeneratedSCSSToTheme,
	generateThemeSCSS,
} from '../../scripts/build-theme-scss';

// Tell Jest to use our manual fs mock
jest.mock('fs');

describe('SCSS Theme Generation Functions', () => {
	const MOCK_FILE_SYSTEM = {
		'/mock-folder/file1.scss': '',
		'/mock-folder/file2.scss': '',
		'/mock-folder/file3.css': '',
		'/mock-folder/file4.txt': '',
	};

	beforeEach(() => {
		// Reset the mock file system before each test
		(fs as any).__setMockFiles(MOCK_FILE_SYSTEM);
		jest.clearAllMocks();
	});

	describe('checkOutputFolderExists', () => {
		it('should create the folder if it does not exist', () => {
			expect(fs.existsSync('/test-folder')).toBe(false);

			checkOutputFolderExists('/test-folder');

			expect(fs.mkdirSync).toHaveBeenCalledWith('/test-folder', { recursive: true });
		});

		it('should not create the folder if it exists', () => {
			expect(fs.existsSync('/mock-folder')).toBe(true);

			checkOutputFolderExists('/mock-folder');

			expect(fs.mkdirSync).not.toHaveBeenCalled();
		});
	});

	describe('getSlottedStyleFiles', () => {
		it('should return only SCSS files', () => {
			const files = getSlottedStyleFiles('/mock-folder');
			expect(files).toEqual(['file1.scss', 'file2.scss']);
		});

		it('should warn if no SCSS files are found', () => {
			const consoleWarnSpy = jest.spyOn(console, 'warn').mockImplementation(() => {});

			const emptyFolder = '/empty-folder';
			(fs as any).__setMockFiles({ [emptyFolder]: [] });

			const files = getSlottedStyleFiles(emptyFolder);

			expect(consoleWarnSpy).toHaveBeenCalledWith('No SCSS files found in the source folder.');
			expect(files).toEqual([]);
			consoleWarnSpy.mockRestore();
		});
	});

	describe('generateThemeSCSSContent', () => {
		it('should return the correct SCSS content including header and imports', () => {
			const files = ['style1.scss', 'style2.scss'];
			const sourceFolder = 'mock-source';
			const targetFolder = 'mock-target';

			const expectedContent =
				'// WARNING: This file is autogenerated. Do not edit manually.\n' +
				'// Changes will be overwritten during the build process.\n\n' +
				"@forward '@ongov/ontario-design-system-global-styles/dist/styles/scss/theme.scss';\n\n" +
				"@use './../mock-source/style1.scss';\n" +
				"@use './../mock-source/style2.scss';\n";

			expect(generateThemeSCSSContent(files, sourceFolder, targetFolder)).toBe(expectedContent);
		});
	});

	describe('writeGeneratedSCSSToTheme', () => {
		it('should write content to file', () => {
			const consoleLogSpy = jest.spyOn(console, 'log').mockImplementation(() => {});

			writeGeneratedSCSSToTheme('/some/path.scss', 'content');

			expect(fs.writeFileSync).toHaveBeenCalledWith('/some/path.scss', 'content', 'utf8');
			expect(consoleLogSpy).toHaveBeenCalledWith('Generated theme.scss at /some/path.scss');

			consoleLogSpy.mockRestore();
		});
	});

	describe('generateThemeSCSS', () => {
		it('should execute full process', () => {
			generateThemeSCSS();

			expect(fs.writeFileSync).toHaveBeenCalled();
		});
	});
});
